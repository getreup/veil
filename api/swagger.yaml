---
swagger: "2.0"
info:
  description: "This is an api for storing sensitive user information."
  version: "1.0.0"
  title: "Papers"
  contact:
    email: "kjregan10@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:6060"
basePath: "/v2"
tags:
- name: "entity"
  description: "An encrypted entity"
schemes:
- "https"
- "http"
paths:
  /entity:
    post:
      tags:
      - "entity"
      summary: "Add a new entity to be encrypted"
      description: ""
      operationId: "addEntity"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Entity object that needs to be encrypted"
        required: true
        schema:
          $ref: "#/definitions/Entity"
        x-exportParamName: "Body"
      responses:
        "405":
          description: "Invalid input"
      security:
      - papers_auth:
        - "write:entities"
        - "read:entities"
    put:
      tags:
      - "entity"
      summary: "Update an existing entity"
      description: ""
      operationId: "updateEntity"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Entity object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Entity"
        x-exportParamName: "Body"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Entity not found"
        "405":
          description: "Validation exception"
      security:
      - papers_auth:
        - "write:entities"
        - "read:entities"
  /entity/findByID:
    get:
      tags:
      - "entity"
      summary: "Finds Entities by id"
      description: "Multiple id values can be provided with comma separated strings"
      operationId: "findEntitiesByID"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "ID values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Status"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Entity"
        "400":
          description: "Invalid status value"
      security:
      - papers_auth:
        - "write:entities"
        - "read:entities"
  /entity/{entityId}:
    get:
      tags:
      - "entity"
      summary: "Find pet by ID"
      description: "Returns a single entity"
      operationId: "getEntityById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "ID of entity to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "EntityId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Entity"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Entity not found"
      security:
      - api_key: []
    post:
      tags:
      - "entity"
      summary: "Updates an entity with form data"
      description: ""
      operationId: "updateEntityWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "ID of entity that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "EntityId"
      - name: "name"
        in: "formData"
        description: "Updated name of the entity"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "status"
        in: "formData"
        description: "Updated status of the entity"
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      responses:
        "405":
          description: "Invalid input"
      security:
      - papers_auth:
        - "write:entities"
        - "read:entities"
    delete:
      tags:
      - "entity"
      summary: "Deletes an entity"
      description: ""
      operationId: "deleteEntity"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
        x-exportParamName: "ApiKey"
        x-optionalDataType: "String"
      - name: "entityId"
        in: "path"
        description: "Entity id to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "EntityId"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Entity not found"
      security:
      - papers_auth:
        - "write:entities"
        - "read:entities"
securityDefinitions:
  papers_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:entities: "modify entities in your account"
      read:entities: "read your entities"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Entity:
    type: "object"
    required:
    - "firstName"
    - "email"
    properties:
      id:
        type: "integer"
        format: "int64"
      key:
        type: "string"
        example: "ASDF1234"
      firstName:
        type: "string"
        example: "Joe"
      email:
        type: "string"
        example: "asdf@asdf.com"
    xml:
      name: "Entity"
    example:
      id: 0
      key: "ASDF1234"
      firstName: "Joe"
      email: "asdf@asdf.com"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
    example:
      code: 0
      type: "type"
      message: "message"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
